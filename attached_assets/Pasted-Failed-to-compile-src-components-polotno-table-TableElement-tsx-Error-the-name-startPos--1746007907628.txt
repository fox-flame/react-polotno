Failed to compile
./src/components/polotno-table/TableElement.tsx
Error: 
  Ã— the name `startPos` is defined multiple times
     â•­â”€[/home/runner/workspace/src/components/polotno-table/TableElement.tsx:147:1]
 147 â”‚       console.log("ðŸš€ ~ handleResizerMouseDown ~ type:", type);
 148 â”‚       e.cancelBubble = true;
 149 â”‚       
 150 â”‚       const startPos = type === 'column' ? e.evt.clientX : e.evt.clientY;
     Â·             â”€â”€â”€â”€â”¬â”€â”€â”€
     Â·                 â•°â”€â”€ previous definition of `startPos` here
 151 â”‚       
 152 â”‚       const handleMouseMove = (moveEvt: MouseEvent) => {
 153 â”‚         const currentPos = type === 'column' ? moveEvt.clientX : moveEvt.clientY;
 154 â”‚         const delta = currentPos - startPos;
 155 â”‚         handleResize(type as 'column' | 'row', index, delta);
 156 â”‚       };
 157 â”‚       
 158 â”‚       const handleMouseUp = () => {
 159 â”‚         document.removeEventListener('mousemove', handleMouseMove);
 160 â”‚         document.removeEventListener('mouseup', handleMouseUp);
 161 â”‚       };
 162 â”‚       
 163 â”‚       document.addEventListener('mousemove', handleMouseMove);
 164 â”‚       document.addEventListener('mouseup', handleMouseUp);
 165 â”‚ 
 166 â”‚       const startPos = type === "column" ? e.evt.clientX : e.evt.clientY;
     Â·             â”€â”€â”€â”€â”¬â”€â”€â”€
     Â·                 â•°â”€â”€ `startPos` redefined here
 167 â”‚       const sizes = type === "column" ? [...colWidths] : [...rowHeights];
 168 â”‚ 
 169 â”‚       setResizing({
     â•°â”€â”€â”€â”€

  Ã— the name `handleMouseMove` is defined multiple times
     â•­â”€[/home/runner/workspace/src/components/polotno-table/TableElement.tsx:149:1]
 149 â”‚       
 150 â”‚       const startPos = type === 'column' ? e.evt.clientX : e.evt.clientY;
 151 â”‚       
 152 â”‚       const handleMouseMove = (moveEvt: MouseEvent) => {
     Â·             â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€
     Â·                    â•°â”€â”€ previous definition of `handleMouseMove` here
 153 â”‚         const currentPos = type === 'column' ? moveEvt.clientX : moveEvt.clientY;
 154 â”‚         const delta = currentPos - startPos;
 155 â”‚         handleResize(type as 'column' | 'row', index, delta);
 156 â”‚       };
 157 â”‚       
 158 â”‚       const handleMouseUp = () => {
 159 â”‚         document.removeEventListener('mousemove', handleMouseMove);
 160 â”‚         document.removeEventListener('mouseup', handleMouseUp);
 161 â”‚       };
 162 â”‚       
 163 â”‚       document.addEventListener('mousemove', handleMouseMove);
 164 â”‚       document.addEventListener('mouseup', handleMouseUp);
 165 â”‚ 
 166 â”‚       const startPos = type === "column" ? e.evt.clientX : e.evt.clientY;
 167 â”‚       const sizes = type === "column" ? [...colWidths] : [...rowHeights];
 168 â”‚ 
 169 â”‚       setResizing({
 170 â”‚         type,
 171 â”‚         index,
 172 â”‚         startPos,
 173 â”‚         sizes,
 174 â”‚       });
 175 â”‚ 
 176 â”‚       const handleMouseMove = (moveEvt: MouseEvent) => {
     Â·             â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€
     Â·                    â•°â”€â”€ `handleMouseMove` redefined here
 177 â”‚         if (!resizing) return;
 178 â”‚ 
 179 â”‚         const currentPos =
     â•°â”€â”€â”€â”€

  Ã— the name `handleMouseUp` is defined multiple times
     â•­â”€[/home/runner/workspace/src/components/polotno-table/TableElement.tsx:155:1]
 155 â”‚         handleResize(type as 'column' | 'row', index, delta);
 156 â”‚       };
 157 â”‚       
 158 â”‚       const handleMouseUp = () => {
     Â·             â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€
     Â·                   â•°â”€â”€ previous definition of `handleMouseUp` here
 159 â”‚         document.removeEventListener('mousemove', handleMouseMove);
 160 â”‚         document.removeEventListener('mouseup', handleMouseUp);
 161 â”‚       };
 162 â”‚       
 163 â”‚       document.addEventListener('mousemove', handleMouseMove);
 164 â”‚       document.addEventListener('mouseup', handleMouseUp);
 165 â”‚ 
 166 â”‚       const startPos = type === "column" ? e.evt.clientX : e.evt.clientY;
 167 â”‚       const sizes = type === "column" ? [...colWidths] : [...rowHeights];
 168 â”‚ 
 169 â”‚       setResizing({
 170 â”‚         type,
 171 â”‚         index,
 172 â”‚         startPos,
 173 â”‚         sizes,
 174 â”‚       });
 175 â”‚ 
 176 â”‚       const handleMouseMove = (moveEvt: MouseEvent) => {
 177 â”‚         if (!resizing) return;
 178 â”‚ 
 179 â”‚         const currentPos =
 180 â”‚           type === "column" ? moveEvt.clientX : moveEvt.clientY;
 181 â”‚         const delta = currentPos - startPos;
 182 â”‚ 
 183 â”‚         // Update sizes based on the delta
 184 â”‚         const newSizes = [...sizes];
 185 â”‚ 
 186 â”‚         if (type === "column") {
 187 â”‚           // Ensure we don't make columns too small
 188 â”‚           const minColWidth = 20;
 189 â”‚           const maxDelta = newSizes[index] - minColWidth;
 190 â”‚           const safetyDelta = delta > 0 ? delta : Math.max(delta, -maxDelta);
 191 â”‚ 
 192 â”‚           newSizes[index] += safetyDelta;
 193 â”‚           if (index < newSizes.length - 1) {
 194 â”‚             // If not the last column, take space from the next column
 195 â”‚             const nextMaxDelta = newSizes[index + 1] - minColWidth;
 196 â”‚             const nextSafetyDelta =
 197 â”‚               -safetyDelta > 0
 198 â”‚                 ? -safetyDelta
 199 â”‚                 : Math.max(-safetyDelta, -nextMaxDelta);
 200 â”‚             newSizes[index + 1] -= safetyDelta;
 201 â”‚           }
 202 â”‚         } else {
 203 â”‚           // Ensure we don't make rows too small
 204 â”‚           const minRowHeight = 20;
 205 â”‚           const maxDelta = newSizes[index] - minRowHeight;
 206 â”‚           const safetyDelta = delta > 0 ? delta : Math.max(delta, -maxDelta);
 207 â”‚ 
 208 â”‚           newSizes[index] += safetyDelta;
 209 â”‚           if (index < newSizes.length - 1) {
 210 â”‚             // If not the last row, take space from the next row
 211 â”‚             const nextMaxDelta = newSizes[index + 1] - minRowHeight;
 212 â”‚             const nextSafetyDelta =
 213 â”‚               -safetyDelta > 0
 214 â”‚                 ? -safetyDelta
 215 â”‚                 : Math.max(-safetyDelta, -nextMaxDelta);
 216 â”‚             newSizes[index + 1] -= safetyDelta;
 217 â”‚           }
 218 â”‚         }
 219 â”‚ 
 220 â”‚         // Update the resizing state with the new sizes
 221 â”‚         setResizing({
 222 â”‚           ...resizing,
 223 â”‚           sizes: newSizes,
 224 â”‚         });
 225 â”‚       };
 226 â”‚ 
 227 â”‚       const handleMouseUp = () => {
     Â·             â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€
     Â·                   â•°â”€â”€ `handleMouseUp` redefined here
 228 â”‚         setResizing(null);
 229 â”‚         document.removeEventListener("mousemove", handleMouseMove);
 230 â”‚         document.removeEventListener("mouseup", handleMouseUp);
     â•°â”€â”€â”€â”€